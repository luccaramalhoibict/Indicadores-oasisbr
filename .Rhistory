library(shiny)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
oasisbrDF <- fromJSON("https://oasisbr.ibict.br/vufind/api/v1/search?&type=AllFields&page=0&limit=0&sort=relevance&facet[]=author_facet&facet[]=dc.subject.por.fl_str_mv&facet[]=eu_rights_str_mv&facet[]=dc.publisher.program.fl_str_mv&facet[]=dc.subject.cnpq.fl_str_mv&facet[]=publishDate&facet[]=language&facet[]=format&facet[]=institution&facet[]=dc.contributor.advisor1.fl_str_mv")
#######################
## Documentos por ano de publicação (publishDate)
x <- oasisbrDF
### Cria subconjunto
publishDate <- x$facets$publishDate
shiny::validate(need(is.null(publishDate)==FALSE, paste("A sua busca não corresponde a nenhum registro.")))
## Retira registro 'sem informação' da coluna 'value'
publishDate <- publishDate[publishDate$value!='sem informação',]
## Adiciona coluna de % de total
publishDate <- publishDate %>% mutate(pctTotal=count/x$resultCount)
publishDate$value <- as.integer(publishDate$value)
## Filtra período (2002-2022)
publishDate <- subset(publishDate, value %in% c(y:z))
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
subject_cnpqPlot <- ggplot(subject_cnpq) +
aes(x = reorder(tratado, total), group = tratado, weight = total,
text=paste('<b style="font-family: Lato !important; align=left; font-size:14px; font-weight:400; color:gray">Área do conhecimento CNPQ:</b>',
'<b style="font-family: Lato !important; align=left; font-size:16px; font-weight:600 color: black">',tratado,"</b>",
"<br><br>",
'<b style="font-family: Lato !important; align=left; font-size:14px font-weight:400; color:gray">Quantidade de documentos:</b>',
'<b style="font-family: Lato !important; align=left; font-size:16px; font-weight:600 color: black">',comma(total),"</b>",
"<br><br>",
'<b style="font-family: Lato !important; align=left; font-size:14px font-weight:400; color:gray"">% do total:</b>',
'<b style="font-family: Lato !important; align=left; font-size:16px; font-weight:600 color: black">',scales::percent(pctTotal),"</b>"
)) +
geom_bar(fill = "#112446") +
scale_y_continuous(labels = scales::comma)+
scale_x_date(date_labels = "%Y")+
labs(x = "<b style='color:gray'>Área do conhecimento CNPQ</b><br><br><b style='color:white'>.",
y = "<b style='color:gray; font-size:14px'>Total de documentos", title = NULL) +
theme_minimal() +
theme(axis.title.x = element_text(size = 14L)) +
coord_flip()
ggplotly(subject_cnpqPlot, tooltip="text") %>%
layout(font=t, separators=".",
margin = list(l=50,b = 55),
hoverlabel=list(bgcolor="white")
) %>% config(displayModeBar = F)
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_date(date_labels = "%Y")+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDate$value
str(publishDate$value)
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
#######################
## Documentos por ano de publicação (publishDate)
x <- oasisbrDF
### Cria subconjunto
publishDate <- x$facets$publishDate
shiny::validate(need(is.null(publishDate)==FALSE, paste("A sua busca não corresponde a nenhum registro.")))
## Retira registro 'sem informação' da coluna 'value'
publishDate <- publishDate[publishDate$value!='sem informação',]
## Adiciona coluna de % de total
publishDate <- publishDate %>% mutate(pctTotal=count/x$resultCount)
publishDate$value <- as.integer(publishDate$value)
## Filtra período (2002-2022)
publishDate <- subset(publishDate, value %in% c(y:z))
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_continuous()+
#scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
renderAnoPublicacaoPlot <- function(x,y,z) {
#######################
## Documentos por ano de publicação (publishDate)
x <- oasisbrDF
### Cria subconjunto
publishDate <- x$facets$publishDate
#View(publishDate)
shiny::validate(need(is.null(publishDate)==FALSE, paste("A sua busca não corresponde a nenhum registro.")))
## Ordena coluna 'value' (Ano de publicação)
#publishDate <- publishDate[with(publishDate, order(-value)),]
## Retira registro 'sem informação' da coluna 'value'
publishDate <- publishDate[publishDate$value!='sem informação',]
## Adiciona coluna de % de total
publishDate <- publishDate %>% mutate(pctTotal=count/x$resultCount)
## Cria DF vazio para visualização por ano
#publishDateEmpty <- data.frame(value=as.character(c(min(publishDate$value):c(max(publishDate$value)))),yearSum=0)
publishDate$value <- as.integer(publishDate$value)
#publishDate <- left_join(publishDate,publishDateEmpty)
## Filtra período (2002-2022)
publishDate <- subset(publishDate, value %in% c(y:z))
## Gráfico de ano de publicação
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_continuous()+
#scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
}
renderAnoPublicacaoPlot <- function(x,y,z) {
#######################
## Documentos por ano de publicação (publishDate)
x <- oasisbrDF
### Cria subconjunto
publishDate <- x$facets$publishDate
#View(publishDate)
shiny::validate(need(is.null(publishDate)==FALSE, paste("A sua busca não corresponde a nenhum registro.")))
## Ordena coluna 'value' (Ano de publicação)
#publishDate <- publishDate[with(publishDate, order(-value)),]
## Retira registro 'sem informação' da coluna 'value'
publishDate <- publishDate[publishDate$value!='sem informação',]
## Adiciona coluna de % de total
publishDate <- publishDate %>% mutate(pctTotal=count/x$resultCount)
## Cria DF vazio para visualização por ano
#publishDateEmpty <- data.frame(value=as.character(c(min(publishDate$value):c(max(publishDate$value)))),yearSum=0)
publishDate$value <- as.integer(publishDate$value)
#publishDate <- left_join(publishDate,publishDateEmpty)
## Filtra período (2002-2022)
publishDate <- subset(publishDate, value %in% c(y:z))
## Gráfico de ano de publicação
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_continuous()+
#scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
}
runApp(launch.browser = TRUE)
#######################
## Documentos por ano de publicação (publishDate)
x <- oasisbrDF
### Cria subconjunto
publishDate <- x$facets$publishDate
shiny::validate(need(is.null(publishDate)==FALSE, paste("A sua busca não corresponde a nenhum registro.")))
## Retira registro 'sem informação' da coluna 'value'
publishDate <- publishDate[publishDate$value!='sem informação',]
## Adiciona coluna de % de total
publishDate <- publishDate %>% mutate(pctTotal=count/x$resultCount)
publishDate$value <- as.integer(publishDate$value)
## Filtra período (2002-2022)
publishDate <- subset(publishDate, value %in% c(y:z))
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_continuous()+
#scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
renderAnoPublicacaoPlot <- function(x,y,z) {
#######################
## Documentos por ano de publicação (publishDate)
x <- oasisbrDF
### Cria subconjunto
publishDate <- x$facets$publishDate
#View(publishDate)
shiny::validate(need(is.null(publishDate)==FALSE, paste("A sua busca não corresponde a nenhum registro.")))
## Ordena coluna 'value' (Ano de publicação)
#publishDate <- publishDate[with(publishDate, order(-value)),]
## Retira registro 'sem informação' da coluna 'value'
publishDate <- publishDate[publishDate$value!='sem informação',]
## Adiciona coluna de % de total
publishDate <- publishDate %>% mutate(pctTotal=count/x$resultCount)
## Cria DF vazio para visualização por ano
#publishDateEmpty <- data.frame(value=as.character(c(min(publishDate$value):c(max(publishDate$value)))),yearSum=0)
publishDate$value <- as.integer(publishDate$value)
#publishDate <- left_join(publishDate,publishDateEmpty)
## Filtra período (2002-2022)
publishDate <- subset(publishDate, value %in% c(y:z))
## Gráfico de ano de publicação
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_continuous()+
#scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
}
min(publishDate$value)
publishDatePlot <- ggplot(publishDate) +
aes(x = value, group = value, weight = count,
text=paste("Ano de publicação:",value,"<br>","Quantidade",comma(count),"<br>% do total",scales::percent(pctTotal))) +
geom_bar(fill = "#112446") +
labs(x = "Ano de publicação",
y = "Total de documentos", title = NULL) +
theme_minimal() +
scale_y_continuous(labels = scales::comma)+
scale_x_continuous(breaks=min(publishDate$value):max(publishDate$value))+
#scale_x_discrete()+
theme(axis.title.x = element_text(size = 14L))
publishDatePlotly <- ggplotly(publishDatePlot, tooltip="text")
publishDatePlotly %>%
layout(font=t,
xaxis=list(title=list("Total de documentos",font=t)),
yaxis=list(title=list("Ano de publicação",font=t))
)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
setwd("D:/.shortcut-targets-by-id/1rpdNQPT-oFzfMyovp_ZMJWLZMfYiiUTG/CODIC/Oasisbr/Indicadores/App/Indicadores-oasisbr")
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
